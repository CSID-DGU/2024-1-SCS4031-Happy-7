{"ast":null,"code":"useEffect(() => {\n  const fetchDummyData = () => {\n    const dummyPrice = (Math.random() * (60000 - 50000) + 50000).toFixed(2);\n    const dummyVolume = (Math.random() * 100).toFixed(2);\n    const currentTime = new Date().toLocaleTimeString();\n    setProfitRate(Math.floor(Math.random() * 100));\n    setAccuracy(Math.floor(Math.random() * 100));\n    const newProfit = totalProfit + Math.floor(Math.random() * 200 - 100);\n    setPreviousProfit(totalProfit);\n    setTotalProfit(newProfit);\n    const change = newProfit - previousProfit;\n    setProfitChange(change);\n    setIsProfitIncreasing(change >= 0);\n\n    // 데이터 유지 개수 증가 (50개 데이터 유지)\n    setPriceData(prevPriceData => [...prevPriceData, dummyPrice].slice(-50));\n    setTimeData(prevTimeData => [...prevTimeData, currentTime].slice(-50));\n    setVolumeData(prevVolumeData => [...prevVolumeData, dummyVolume].slice(-50)); // 더 많은 데이터 유지\n\n    const newTrade = {\n      time: currentTime,\n      price: dummyPrice,\n      volume: dummyVolume,\n      action: Math.random() > 0.5 ? 'Buy' : 'Sell',\n      result: Math.random() > 0.5 ? 'Win' : 'Lose'\n    };\n    setTradeHistory(prevHistory => {\n      const updatedHistory = [...prevHistory, newTrade];\n      return updatedHistory.length > 15 ? updatedHistory.slice(-15) : updatedHistory;\n    });\n    const recentPrices = [...priceData, dummyPrice].slice(-50); // Price도 50개 데이터 유지\n    const priceDifference = recentPrices[recentPrices.length - 1] - recentPrices[0];\n    setTrend(priceDifference > 0 ? '상승세' : '하락세');\n  };\n\n  // 주기가 5초로 정확히 작동하도록 설정\n  const interval = setInterval(fetchDummyData, 5000); // 5초(5000ms) 간격으로 데이터 갱신\n  return () => clearInterval(interval);\n}, []); // 빈 의존성 배열로 설정해 처음 실행 시 주기적으로 실행","map":{"version":3,"names":["useEffect","fetchDummyData","dummyPrice","Math","random","toFixed","dummyVolume","currentTime","Date","toLocaleTimeString","setProfitRate","floor","setAccuracy","newProfit","totalProfit","setPreviousProfit","setTotalProfit","change","previousProfit","setProfitChange","setIsProfitIncreasing","setPriceData","prevPriceData","slice","setTimeData","prevTimeData","setVolumeData","prevVolumeData","newTrade","time","price","volume","action","result","setTradeHistory","prevHistory","updatedHistory","length","recentPrices","priceData","priceDifference","setTrend","interval","setInterval","clearInterval"],"sources":["/Users/lee-boseong/happy-coin/src/App.js"],"sourcesContent":["useEffect(() => {\n  const fetchDummyData = () => {\n    const dummyPrice = (Math.random() * (60000 - 50000) + 50000).toFixed(2);\n    const dummyVolume = (Math.random() * 100).toFixed(2);\n    const currentTime = new Date().toLocaleTimeString();\n\n    setProfitRate(Math.floor(Math.random() * 100));\n    setAccuracy(Math.floor(Math.random() * 100));\n\n    const newProfit = totalProfit + Math.floor(Math.random() * 200 - 100);\n    setPreviousProfit(totalProfit);\n    setTotalProfit(newProfit);\n\n    const change = newProfit - previousProfit;\n    setProfitChange(change);\n    setIsProfitIncreasing(change >= 0);\n\n    // 데이터 유지 개수 증가 (50개 데이터 유지)\n    setPriceData((prevPriceData) => [...prevPriceData, dummyPrice].slice(-50)); \n    setTimeData((prevTimeData) => [...prevTimeData, currentTime].slice(-50)); \n    setVolumeData((prevVolumeData) => [...prevVolumeData, dummyVolume].slice(-50)); // 더 많은 데이터 유지\n\n    const newTrade = {\n      time: currentTime,\n      price: dummyPrice,\n      volume: dummyVolume,\n      action: Math.random() > 0.5 ? 'Buy' : 'Sell',\n      result: Math.random() > 0.5 ? 'Win' : 'Lose',\n    };\n    setTradeHistory((prevHistory) => {\n      const updatedHistory = [...prevHistory, newTrade];\n      return updatedHistory.length > 15 ? updatedHistory.slice(-15) : updatedHistory;\n    });\n\n    const recentPrices = [...priceData, dummyPrice].slice(-50); // Price도 50개 데이터 유지\n    const priceDifference = recentPrices[recentPrices.length - 1] - recentPrices[0];\n    setTrend(priceDifference > 0 ? '상승세' : '하락세');\n  };\n\n  // 주기가 5초로 정확히 작동하도록 설정\n  const interval = setInterval(fetchDummyData, 5000); // 5초(5000ms) 간격으로 데이터 갱신\n  return () => clearInterval(interval);\n}, []); // 빈 의존성 배열로 설정해 처음 실행 시 주기적으로 실행\n"],"mappings":"AAAAA,SAAS,CAAC,MAAM;EACd,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,UAAU,GAAG,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,IAAI,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,EAAEC,OAAO,CAAC,CAAC,CAAC;IACvE,MAAMC,WAAW,GAAG,CAACH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC;IACpD,MAAME,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;IAEnDC,aAAa,CAACP,IAAI,CAACQ,KAAK,CAACR,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;IAC9CQ,WAAW,CAACT,IAAI,CAACQ,KAAK,CAACR,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;IAE5C,MAAMS,SAAS,GAAGC,WAAW,GAAGX,IAAI,CAACQ,KAAK,CAACR,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;IACrEW,iBAAiB,CAACD,WAAW,CAAC;IAC9BE,cAAc,CAACH,SAAS,CAAC;IAEzB,MAAMI,MAAM,GAAGJ,SAAS,GAAGK,cAAc;IACzCC,eAAe,CAACF,MAAM,CAAC;IACvBG,qBAAqB,CAACH,MAAM,IAAI,CAAC,CAAC;;IAElC;IACAI,YAAY,CAAEC,aAAa,IAAK,CAAC,GAAGA,aAAa,EAAEpB,UAAU,CAAC,CAACqB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAC1EC,WAAW,CAAEC,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAElB,WAAW,CAAC,CAACgB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IACxEG,aAAa,CAAEC,cAAc,IAAK,CAAC,GAAGA,cAAc,EAAErB,WAAW,CAAC,CAACiB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;IAEhF,MAAMK,QAAQ,GAAG;MACfC,IAAI,EAAEtB,WAAW;MACjBuB,KAAK,EAAE5B,UAAU;MACjB6B,MAAM,EAAEzB,WAAW;MACnB0B,MAAM,EAAE7B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,MAAM;MAC5C6B,MAAM,EAAE9B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG;IACxC,CAAC;IACD8B,eAAe,CAAEC,WAAW,IAAK;MAC/B,MAAMC,cAAc,GAAG,CAAC,GAAGD,WAAW,EAAEP,QAAQ,CAAC;MACjD,OAAOQ,cAAc,CAACC,MAAM,GAAG,EAAE,GAAGD,cAAc,CAACb,KAAK,CAAC,CAAC,EAAE,CAAC,GAAGa,cAAc;IAChF,CAAC,CAAC;IAEF,MAAME,YAAY,GAAG,CAAC,GAAGC,SAAS,EAAErC,UAAU,CAAC,CAACqB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5D,MAAMiB,eAAe,GAAGF,YAAY,CAACA,YAAY,CAACD,MAAM,GAAG,CAAC,CAAC,GAAGC,YAAY,CAAC,CAAC,CAAC;IAC/EG,QAAQ,CAACD,eAAe,GAAG,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC;EAC/C,CAAC;;EAED;EACA,MAAME,QAAQ,GAAGC,WAAW,CAAC1C,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;EACpD,OAAO,MAAM2C,aAAa,CAACF,QAAQ,CAAC;AACtC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}